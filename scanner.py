import aiohttp
import asyncio
import logging

from utils.telegram import send_telegram_message  # ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи ржПржЗ ржлрж╛ржЗрж▓ ржУ ржлрж╛ржВрж╢ржи ржарж┐ржХ ржЖржЫрзЗ

# тЬЕ Bitget API ржерзЗржХрзЗ ржорж╛рж░рзНржХрзЗржЯ ржбрзЗржЯрж╛ ржЖржирж╛
async def fetch_symbols():
    url = "https://api.bitget.com/api/v2/mix/market/tickers?productType=umcbl"
    async with aiohttp.ClientSession() as session:
        try:
            async with session.get(url) as resp:
                print(f"ЁЯФД Bitget API Status: {resp.status}")
                text = await resp.text()
                print(f"ЁЯУе Bitget API Response: {text[:500]}")  # ржмрзЬ response ржХрж╛ржЯржЫрж╛ржБржЯ ржХрж░рзЗ ржжрзЗржЦрж╛ржирзЛ
                if resp.status == 200:
                    return await resp.json()
                else:
                    logging.error(f"тЭМ Failed to fetch symbols: HTTP {resp.status}")
                    return None
        except Exception as e:
            logging.error(f"тЭМ Exception during fetch_symbols: {e}")
            return None

# тЬЕ ржорзВрж▓ рж╕рзНржХрзНржпрж╛ржирж╛рж░ ржлрж╛ржВрж╢ржи
async def run_scanner():
    data = await fetch_symbols()
    if data is None or "data" not in data:
        logging.error("тЭМ Symbol data fetch failed or 'data' key missing in response.")
        return

    try:
        all_symbols = [x["symbol"] for x in data["data"]]
        print(f"тЬЕ Total symbols fetched: {len(all_symbols)}")

        # тЬЕ ржПржЦрж╛ржирзЗ ржЯрзНрж░рзЗржбрж┐ржВ рж▓ржЬрж┐ржХ ржмрж╕ржмрзЗ тАФ ржПржЦржи рж╢рзБржзрзБ ржбрзЗржорзЛ ржкрзНрж░рж┐ржирзНржЯ ржПржмржВ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржмрж╛рж░рзНрждрж╛ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
        for symbol in all_symbols[:5]:  # рж╢рзБржзрзБ ржкрзНрж░ржержо рзлржЯрж╛ рж╕рж┐ржорзНржмрж▓
            print(f"ЁЯФН Scanning {symbol}")
            await send_telegram_message(f"ЁЯЯв Scanned symbol: {symbol}")

    except Exception as e:
        logging.error(f"тЭМ Exception in run_scanner: {e}")